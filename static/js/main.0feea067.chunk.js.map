{"version":3,"sources":["redux/action-types.ts","redux/reducer.ts","components/front-page/front-page.tsx","components/new-resident-page/new-resident-page.tsx","redux/actions.ts","components/add-contact-to-resident/add-contact-to-resident.tsx","components/new-contact-page/new-contact-page.tsx","components/add-contact-to-contact/add-contact-to-contact.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ReduxActionTypes","InitialState","residents","contacts","home","connect","state","console","log","className","to","style","color","textDecoration","border","length","href","NewResident","useState","nameValue","setNameValue","residence","setResidence","emergencyContactName","setEmergencyContactName","emergencyContactNumber","setEmergencyContactNumber","handleSubmit","useCallback","e","preventDefault","id","Date","now","toString","residentValue","resident","name","firstContacts","store","dispatch","type","ADD_RESIDENT","data","handleNameChange","target","value","handleHomeChange","handleEmergencyContactChange","handleContactNumberChange","Fragment","onSubmit","onChange","customStyles","option","provided","borderBottom","isSelected","padding","width","menu","styles","backgroundColor","control","singleValue","opacity","isDisabled","transition","label","searchResident","changeResident","foundResidentId","changeFoundResidentId","foundResident","changeFoundResident","searchContact","changeContact","foundContact","changeFoundContact","ResidentOptions","useMemo","map","handleResidentChange","inputTerm","handleResidentSubmit","filter","ContactOptions","contact","email","handleContactChange","handleContactSubmit","handleAddContact","residentId","contactEmail","ADD_CONTACT_TO_RESIDENT","options","onKeyDown","onClick","initialState","phone","NewContact","emailValue","setEmailValue","phoneNumber","setPhoneNumber","contactIndex","setContactIndex","listOfContacts","setListOfContacts","activeInput","setActiveInput","contactInputType","setContactInputType","contactValue","residentContactIDs","ADD_CONTACT","handleEmailChange","handlePhoneNumberChange","handleFirstContactChange","newArray","forEach","index","addState","parseInt","oldArray","handleOnFocus","document","activeElement","tagName","split","contactInputs","onFocus","JSON","stringify","createStore","action","newResidents","activeResident","findIndex","updatedResident","push","newResidentsArray","App","exact","path","component","FrontPage","ExistingResident","AddContactToContact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0feea067.chunk.js","sourcesContent":["export enum ReduxActionTypes {\n    ADD_RESIDENT = 'ADD_RESIDENT',\n    UPDATE_RESIDENT = 'UPDATE_RESIDENT',\n    DELETE_RESIDENT = 'DELETE_RESIDENT',\n    ADD_CONTACT ='ADD_CONTACT',\n    UPDATE_CONTACT = 'UPDATE_CONTACT',\n    DELETE_CONTACT = 'DELETE_CONTACT',\n    ADD_CONTACT_TO_RESIDENT = 'ADD_CONTACT_TO_RESIDENT',\n    ADD_CONTACT_TO_CONTACT = 'ADD_CONTACT_TO_CONTACT',\n}","import { ReduxActionTypes } from './action-types';\nimport { ResidentType, ContactType } from '../models/data-models';\n\nexport interface AppState {\n    residents: Array<ResidentType>;\n    contacts: Array<ContactType>;\n    home: string;\n}\n\ninterface ReduxBaseAction {\n    type: ReduxActionTypes;\n}\n\ninterface ReduxAddResident extends ReduxBaseAction {\n    type: ReduxActionTypes.ADD_RESIDENT; \n    data: ResidentType;\n}\n\ninterface ReduxAddContact extends ReduxBaseAction {\n    type: ReduxActionTypes.ADD_CONTACT;\n    data: ContactType;\n}\n\ninterface ReduxAddContactToResident extends ReduxBaseAction {\n    type: ReduxActionTypes.ADD_CONTACT_TO_RESIDENT;\n    data: { residentId: string, contactEmail: string };\n}\n\nexport type ReduxAddContactAction = ReduxAddContactToResident;\nexport type ReduxActions = ReduxAddResident | ReduxAddContact | ReduxAddContactToResident;\n\nexport const InitialState: AppState = {\n    residents: [],\n    contacts: [],\n    home: ''\n}\n\nexport function rootReducer(\n    state: AppState = InitialState,\n    action: ReduxActions,\n): AppState {\n    console.log('REDUCER', action);\n    switch(action.type) {\n        case ReduxActionTypes.ADD_RESIDENT:\n            const newResidents = [...state.residents, action.data];\n            return {...state, residents: newResidents}\n        case ReduxActionTypes.ADD_CONTACT:\n            return {...state, contacts: [...state.contacts, action.data]}\n        case ReduxActionTypes.ADD_CONTACT_TO_RESIDENT:\n            const activeResident = state.residents.findIndex(resident => resident.id === action.data.residentId);\n            const updatedResident = state.residents[activeResident]\n            updatedResident.firstContacts.push(action.data.contactEmail);\n            const newResidentsArray = [...state.residents];\n            return {...state, residents: newResidentsArray}\n        default:\n            return state;\n    }\n}","import React, { useCallback } from 'react';\nimport './front-page.scss';\nimport { NavLink } from 'react-router-dom';\nimport { AppState } from '../../redux/reducer';\nimport { connect } from 'react-redux';\n\nexport const FrontPage: React.FC<ContactProps> = ({ residents, contacts }) => {\n    console.log('residents, contacts', residents, contacts);\n    return (\n        <div>\n            <h2> Welcome to ProShield </h2>\n            <div className='frontpage-buttons'>\n            <button className='frontpage-buttons__create'>\n                <NavLink to={'/NewResident'} style={{color: 'black', textDecoration: 'none', border: '0px'}}>\n                    <div>Create New Resident</div>\n                </NavLink>\n            </button>\n            <button className='frontpage-buttons__create'>\n                <NavLink to={'/NewContact'} style={{color: 'black', textDecoration: 'none', border: '0px'}}>\n                    <div>Create New Contact</div>\n                </NavLink>\n            </button>\n            {!!residents.length && !!contacts.length &&\n                <button className='frontpage-buttons__add'>\n                    <NavLink to={'/ExistingResident'} style={{color: 'black', textDecoration: 'none', border: '0px'}}>\n                    Add for existing Resident\n                    </NavLink>\n                </button>}\n            {contacts.length > 1 &&\n                <button className='frontpage-buttons__add'>\n                    <NavLink to={'/AddContactToContact'} style={{color: 'black', textDecoration: 'none', border: '0px'}}>\n                    Add Contact to Contact\n                    </NavLink>\n                </button>}\n            </div>\n            <div className='frontpage-footer'>\n                MVP created as part of \n                <br/>\n                <a href=\"https://covid19challenge.mit.edu/beat-the-pandemic-2/\">MIT Beat the Pandemic II hackathon</a>\n                <br/>\n                Track G\n            </div>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state: AppState) => {\n    console.log('state', state);\n    return {\n        residents: state.residents,\n        contacts: state.contacts\n    }\n}\n\ntype ContactProps = ReturnType<typeof mapStateToProps>\n\nexport default connect(mapStateToProps)(FrontPage)","import React, { useCallback, useState } from 'react';\nimport './new-resident-page.scss';\nimport { addResident } from '../../redux/actions';\nimport { NavLink } from 'react-router-dom';\nimport { store } from '../../App';\n\nexport const NewResident: React.FC = () => {\n    const [nameValue, setNameValue] = useState('');\n    const [residence, setResidence] = useState('');\n    const [emergencyContactName, setEmergencyContactName] = useState('');\n    const [emergencyContactNumber, setEmergencyContactNumber] = useState('');\n    const handleSubmit = useCallback((e) => {\n        e.preventDefault();\n        const id = Date.now().toString();\n        console.log('submit', nameValue, residence, emergencyContactName, emergencyContactNumber, id)\n        const resident = {\n            id,\n            residence,\n            name: nameValue,\n            emergencyContactName,\n            emergencyContactNumber,\n            firstContacts: []\n        }\n        store.dispatch(addResident(resident));\n        setNameValue('');\n        setResidence('');\n        setEmergencyContactName('');\n        setEmergencyContactNumber('')\n    }, [nameValue, residence, emergencyContactName, emergencyContactNumber]);\n\n    const handleNameChange = useCallback((e) => {\n        e.preventDefault();\n        setNameValue(e.target.value);\n    }, []);\n\n    const handleHomeChange = useCallback((e) => {\n        setResidence(e.target.value);\n    }, []);\n\n    const handleEmergencyContactChange = useCallback((e) => {\n        e.preventDefault();\n        setEmergencyContactName\n        (e.target.value);\n    }, []);\n\n    const handleContactNumberChange = useCallback((e) => {\n        setEmergencyContactNumber(e.target.value);\n    }, []);\n\n    return (\n        <React.Fragment>\n            <h2> Add nursing home resident</h2>\n            <div className='new-resident-form'>\n                <form onSubmit={handleSubmit}>\n                    <div className='new-resident-form-input'>\n                        <label>\n                        Name:\n                        <input type=\"text\" value={nameValue} onChange={handleNameChange} />\n                        </label>\n                    </div>\n                    <br/>\n                    <div className='new-resident-form-input'>\n                        <label>\n                        Home:\n                        <input type=\"text\" value={residence} onChange={handleHomeChange} />\n                        </label>\n                    </div>\n                    <br/>\n                    <div className='new-resident-form-input'>\n                        <label>\n                            Emergency Contact:\n                            <input type=\"text\" value={emergencyContactName} onChange={handleEmergencyContactChange} />\n                        </label>\n                    </div>\n                    <br/>\n                    <div className='new-resident-form-input'>\n                        Emergency Contact Number:\n                        <label>\n                        <input type=\"text\" value={emergencyContactNumber} onChange={handleContactNumberChange} />\n                        </label>\n                    </div>\n                    <div className='new-resident-form-submit'>\n                        <input type=\"submit\" value='Submit' />\n                    </div>\n                </form>\n            </div>     \n            <button className='new-resident-home'>\n                <NavLink to={'/'} style={{color: 'black', textDecoration: 'none', border: '0px'}}>\n                    Back to Home\n                </NavLink>\n            </button>\n        </React.Fragment>\n\n    )\n}","import { ReduxActionTypes } from './action-types';\nimport { ReduxActions } from './reducer';\nimport { ResidentType, ContactType } from '../models/data-models';\n\nexport function addResident(residentValue: ResidentType): ReduxActions {\n    console.log('resident action', residentValue);\n    return {\n        type: ReduxActionTypes.ADD_RESIDENT,\n        data: residentValue\n    }\n}\n\nexport function addContact(contactValue: ContactType): ReduxActions {\n    return {\n        type: ReduxActionTypes.ADD_CONTACT,\n        data: contactValue\n    }\n}\n\nexport function addContactToResident(residentId: string, contactEmail: string): ReduxActions {\n    return {\n        type: ReduxActionTypes.ADD_CONTACT_TO_RESIDENT,\n        data: { residentId, contactEmail }\n    }\n}","import React, { useMemo, useState, useCallback } from 'react';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport { AppState, ReduxActions } from '../../redux/reducer';\nimport { connect } from 'react-redux';\nimport Select from 'react-select';\nimport './add-contact-to-resident.scss';\nimport { addContactToResident } from '../../redux/actions';\nimport { store } from '../../App';\nimport { NavLink } from 'react-router-dom';\n\nconst customStyles = {\n    option: (provided: any, state: { isSelected: boolean; }) => ({\n      ...provided,\n      borderBottom: '1px dotted pink',\n      color: state.isSelected ? 'red' : 'blue',\n      padding: 10,\n      width: 200,\n    }),\n    menu: (styles: any) => ({\n      width: 200,\n      backgroundColor: 'ivory',\n    }),\n    control: (styles: any) => ({\n      ...styles,\n      // none of react-select's styles are passed to <Control />\n      backgroundColor: 'ivory',\n      width: 200,\n    }),\n    singleValue: (provided: any, state: { isDisabled: any; }) => {\n      const opacity = state.isDisabled ? 0.5 : 1;\n      const transition = 'opacity 300ms';\n  \n      return { ...provided, opacity, transition };\n    }\n  }\n\n  type OptionType = {\n    value: string;\n    label: string;\n  };\n\ntype foundResidentType = {\n    name: string;\n    home: string;\n}\n\nexport const ExistingResident: React.FC<ContactProps> = ({ residents, contacts }) => {\n    const [searchResident, changeResident] = useState<OptionType>({value: '', label: ''})\n    const [foundResidentId, changeFoundResidentId] = useState('');\n    const [foundResident, changeFoundResident] = useState<foundResidentType>({name: '', home: ''});\n    const [searchContact, changeContact] = useState<OptionType>({value: '', label: ''})\n    const [foundContact, changeFoundContact] = useState('');\n    \n    const ResidentOptions = useMemo(() => {\n        return residents.map((resident: { id: string; name: any; residence: any; }) => ({value: resident.id, label: `${resident.name} , ${resident.residence}`}))\n    }, []);\n\n    const handleResidentChange = useCallback((inputTerm) => {\n        console.log('inp', inputTerm, residents);\n        changeResident(inputTerm);\n      },[residents]);\n\n    const handleResidentSubmit = useCallback(() => {\n        console.log('sub', searchResident.value);\n        changeFoundResidentId(searchResident.value);\n        const foundResident = residents.filter((resident: { id: string; }) => searchResident.value === resident.id).map((resident: { name: string; residence: string; }) => ({name: resident.name, home: resident.residence}));\n        console.log('found', foundResident[0]);\n        changeFoundResident(foundResident[0])\n    }, [searchResident])\n\n    const ContactOptions = useMemo(() => {\n        return contacts.map((contact: { email: string; }) => ({value: contact.email, label: contact.email}));\n    }, []);\n\n    const handleContactChange = useCallback((inputTerm) => {\n        changeContact(inputTerm);\n      },[residents]);\n\n    const handleContactSubmit = useCallback(() => {\n        console.log('contact submit', searchContact);\n        changeFoundContact(searchContact.value);\n    }, [searchContact])\n\n    const handleAddContact = useCallback(() => {\n        console.log('handle add', foundResidentId, foundContact);\n        store.dispatch(addContactToResident(foundResidentId, foundContact));\n        changeFoundResidentId('');\n        changeFoundContact('');\n    }, [foundResidentId, foundContact])\n\n    return (\n        <div>\n            <div className='search-resident'>\n                <div>\n                    Type in resident's name\n                </div>\n                <div className='search-resident-select'>\n                    <Select \n                        value={searchResident}\n                        options={ResidentOptions}\n                        styles={customStyles}\n                        onChange={handleResidentChange}\n                        onKeyDown={handleResidentSubmit}\n                    />\n                </div>\n                <div>\n                    {foundResidentId &&\n                        `Found resident ${foundResident.name} in ${foundResident.home}`}\n                </div>\n                <div className='search-contact-text'>\n                    Type in contact's email\n                </div>\n                <div className='search-contact-select'>\n                    <Select \n                        value={searchContact}\n                        options={ContactOptions}\n                        styles={customStyles}\n                        onChange={handleContactChange}\n                        onKeyDown={handleContactSubmit}\n                    />\n                </div>\n                <div>\n                    {foundContact &&\n                        `Found contact ${foundContact}`}\n                </div>\n            </div>\n            {foundResidentId && foundContact &&\n            <div>\n                <button className='add-contact-to-resident-button' onClick={handleAddContact} value='Add'>\n                    ADD\n                </button>\n            </div>}\n            <button className='add-to-resident-home'>\n                <NavLink to={'/'} style={{color: 'black', textDecoration: 'none', border: '0px'}}>\n                    Back to Home\n                </NavLink>\n            </button>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state: AppState) => ({\n    residents: state.residents,\n    contacts: state.contacts\n})\n\n// const mapDispatchToProps = (dispatch: Dispatch<ReduxActions>) =>\n//     bindActionCreators({ addContactToResident }, dispatch);\n\ntype ContactProps = ReturnType<typeof mapStateToProps>;\n\nexport default connect(mapStateToProps)(ExistingResident)","import React, { useCallback, useState, useMemo, ReactEventHandler } from 'react';\nimport { addContact } from '../../redux/actions';\nimport { NavLink } from 'react-router-dom';\nimport { store } from '../../App';\nimport { FirstContactType, FirstContactFieldType } from '../../models/data-models';\n\nconst initialState: FirstContactType = {\n    name: '',\n    email: '',\n    phone: '',\n    id: '0'\n}\n\nexport const NewContact: React.FC = () => {\n        const [nameValue, setNameValue] = useState('');\n        const [emailValue, setEmailValue] = useState('');\n        const [phoneNumber, setPhoneNumber] = useState('');\n        const [contactIndex, setContactIndex] = useState('0');\n        const [listOfContacts, setListOfContacts] = useState<Array<FirstContactType>>([initialState]);\n        const [activeInput, setActiveInput] = useState(0);\n        const [contactInputType, setContactInputType] = useState<FirstContactFieldType>('name');\n\n        const handleSubmit = useCallback((e) => {\n            console.log('submit', nameValue, listOfContacts)\n            e.preventDefault();\n            const contact = {\n                name: nameValue,\n                email: emailValue,\n                phone: phoneNumber,\n                residentContactIDs: [],\n                firstContacts: listOfContacts\n            }\n            store.dispatch(addContact(contact));\n            setNameValue('');\n            setEmailValue('');\n            setPhoneNumber('');\n        }, [nameValue, emailValue, phoneNumber]);\n    \n        const handleNameChange = useCallback((e) => {\n            e.preventDefault();\n            setNameValue(e.target.value);\n        }, []);\n    \n        const handleEmailChange = useCallback((e) => {\n            setEmailValue(e.target.value);\n        }, []);\n    \n        const handlePhoneNumberChange = useCallback((e) => {\n            e.preventDefault();\n            setPhoneNumber(e.target.value);\n        }, []);\n    \n        const handleFirstContactChange = useCallback((e) => {\n            const newArray = [...listOfContacts];\n            listOfContacts.forEach((contact, index) => {\n                if (activeInput === index) {\n                    contact[contactInputType] = e.target.value;\n                }\n                return contact;\n            });\n            setListOfContacts(newArray);\n        }, [activeInput, listOfContacts, contactInputType])\n\n        const handleAddContact = useCallback(() => {\n            const addState = {\n                name: '',\n                email: '',\n                phone: '',\n                id: `${parseInt(contactIndex)+1}`\n            }\n            setListOfContacts(oldArray => [...oldArray, addState]);\n            setContactIndex(`${parseInt(contactIndex)+1}`);\n        }, [contactIndex])\n\n        const handleOnFocus = useCallback(() => {\n            if (document.activeElement && document.activeElement.tagName === 'INPUT') {\n                setContactInputType((document.activeElement as HTMLInputElement).name.split(':')[0] as FirstContactFieldType);\n                setActiveInput(parseInt((document.activeElement as HTMLInputElement).name.split(':')[1]));\n            }\n        }, []);\n\n        const contactInputs = useMemo(() => {\n            return listOfContacts.map((contact, index) => (                    \n                <div className='new-resident-form-input'>\n                    <div>Add close contact</div>\n                    <label>\n                        Name\n                        <input type=\"text\" name={`${'name' as FirstContactFieldType}:${index}`} value={`${contact.name}`} onFocus={handleOnFocus} onChange={handleFirstContactChange}/>\n                    </label>\n                    <label>\n                        Email\n                        <input type=\"text\" name={`${'email' as FirstContactFieldType}:${index}`} value={`${contact.email}`} onFocus={handleOnFocus} onChange={handleFirstContactChange}/>\n                    </label>\n                    <label>\n                        Phone\n                        <input type=\"text\" name={`${'phone' as FirstContactFieldType}:${index}`} value={`${contact.phone}`} onFocus={handleOnFocus} onChange={handleFirstContactChange}/>\n                    </label>\n                </div>\n            ))\n        }, [contactIndex, listOfContacts, handleOnFocus, handleFirstContactChange])\n\n        return (\n        <React.Fragment>\n            <h2> Add new contact </h2>\n            <div className='new-contact-form'>\n                <div>\n                    <div className='new-contact-form-input'>\n                        <label>\n                        Name:\n                        <input type=\"text\" value={nameValue} onChange={handleNameChange} />\n                        </label>\n                    </div>\n                    <br/>\n                    <div className='new-contact-form-input'>\n                        <label>\n                        Email:\n                        <input type=\"text\" value={emailValue} onChange={handleEmailChange} />\n                        </label>\n                    </div>\n                    <br/>\n                    <div className='new-contact-form-input'>\n                        <label>\n                            Phone Number\n                            <input type=\"text\" value={phoneNumber} onChange={handlePhoneNumberChange} />\n                        </label>\n                    </div>\n                    {/* <div className='new-contact-form-input'>\n                        <label>\n                            Add close contact\n                            <input type=\"text\" value={firstContact} onChange={handleFirstContactEmailChange(0)} />\n                        </label>\n                    </div> */}\n                    {contactInputs}\n                    <div className='new-contact-add-btn'>\n                        <input type='submit' value='Add Contact' onClick={handleAddContact}/>\n                    </div>\n                    <div className='new-contact-form-submit'>\n                        <input type=\"submit\" value='Submit' onClick={handleSubmit}/>\n                    </div>\n                </div>\n            </div>     \n            <button className='new-contact-home'>\n                <NavLink to={'/'} style={{color: 'black', textDecoration: 'none', border: '0px'}}>\n                    Back to Home\n                </NavLink>\n            </button>\n        </React.Fragment>\n    )\n}","import React, { useState } from 'react';\nimport { AppState } from '../../redux/reducer';\nimport { connect } from 'react-redux';\n\nexport const AddContactToContact: React.FC<ContactProps> = ({ contacts }) => {\n    console.log('contacts', contacts);\n    const [searchMainContact, changeMainContact] = useState({value: '', name: ''})\n    return (\n        <div> hello {JSON.stringify(contacts)} </div>\n    )\n}\n\nconst mapStateToProps = (state: AppState) => {\n    return {\n        contacts: state.contacts\n    }\n}\n\ntype ContactProps = ReturnType<typeof mapStateToProps>\n\nexport default connect(mapStateToProps)(AddContactToContact)","import React from 'react';\nimport {\n  HashRouter as Router,\n  Route\n} from 'react-router-dom'\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport './App.css';\nimport { rootReducer, InitialState } from './redux/reducer';\nimport FrontPage from './components/front-page/front-page';\nimport { NewResident } from './components/new-resident-page/new-resident-page';\nimport ExistingResident from './components/add-contact-to-resident/add-contact-to-resident';\nimport { NewContact } from './components/new-contact-page/new-contact-page';\nimport AddContactToContact from './components/add-contact-to-contact/add-contact-to-contact';\n\nexport const store = createStore(rootReducer, InitialState);\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className='App'>\n        <Router>\n          <Route exact path={'/'} component={FrontPage} />\n          <Route path={'/NewResident'} component={NewResident} />\n          <Route path={'/NewContact'} component={NewContact} />\n          <Route path={'/ExistingResident'} component={ExistingResident} />\n          <Route path={'/AddContactToContact'} component={AddContactToContact} />\n        </Router>\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}