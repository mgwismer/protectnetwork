{"version":3,"sources":["redux/action-types.ts","redux/reducer.ts","components/front-page/front-page.tsx","components/new-resident-page/new-resident-page.tsx","redux/actions.ts","components/add-contact-to-resident/add-contact-to-resident.tsx","components/new-contact-page/new-contact-page.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ReduxActionTypes","InitialState","residents","contacts","home","connect","state","console","log","className","to","style","color","textDecoration","border","length","NewResident","useState","nameValue","setNameValue","residence","setResidence","emergencyContactName","setEmergencyContactName","emergencyContactNumber","setEmergencyContactNumber","handleSubmit","useCallback","e","preventDefault","id","Date","now","toString","residentValue","resident","name","firstContacts","store","dispatch","type","ADD_RESIDENT","data","handleNameChange","target","value","handleHomeChange","handleEmergencyContactChange","handleContactNumberChange","Fragment","onSubmit","onChange","customStyles","option","provided","borderBottom","isSelected","padding","width","menu","styles","backgroundColor","control","singleValue","opacity","isDisabled","transition","label","searchResident","changeResident","foundResidentId","changeFoundResidentId","foundResident","changeFoundResident","searchContact","changeContact","foundContact","changeFoundContact","ResidentOptions","useMemo","map","handleResidentChange","inputTerm","handleResidentSubmit","filter","ContactOptions","contact","email","handleContactChange","handleContactSubmit","handleAddContact","residentId","contactEmail","ADD_CONTACT_TO_RESIDENT","options","onKeyDown","onClick","NewContact","emailValue","setEmailValue","phoneNumber","setPhoneNumber","contactValue","phone","residentContactIDs","ADD_CONTACT","handleEmailChange","handlePhoneNumberChange","createStore","action","newResidents","activeResident","findIndex","updatedResident","push","newResidentsArray","App","exact","path","component","FrontPage","ExistingResident","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yQAAYA,E,sGAAAA,K,4BAAAA,E,kCAAAA,E,kCAAAA,E,0BAAAA,E,gCAAAA,E,gCAAAA,E,kDAAAA,E,iDAAAA,M,KC+BL,IAAMC,EAAyB,CAClCC,UAAW,GACXC,SAAU,GACVC,KAAM,I,UCeKC,eAVS,SAACC,GAErB,OADAC,QAAQC,IAAI,QAASF,GACd,CACHJ,UAAWI,EAAMJ,UACjBC,SAAUG,EAAMH,YAMTE,EA3CkC,SAAC,GAA6B,IAA3BH,EAA0B,EAA1BA,UAAWC,EAAe,EAAfA,SAE3D,OADAI,QAAQC,IAAI,sBAAuBN,EAAWC,GAE1C,6BACI,sDACA,yBAAKM,UAAU,qBACf,4BAAQA,UAAU,6BACd,kBAAC,IAAD,CAASC,GAAI,eAAgBC,MAAO,CAACC,MAAO,QAASC,eAAgB,OAAQC,OAAQ,QACjF,sDAGR,4BAAQL,UAAU,6BACd,kBAAC,IAAD,CAASC,GAAI,cAAeC,MAAO,CAACC,MAAO,QAASC,eAAgB,OAAQC,OAAQ,QAChF,uDAGLZ,EAAUa,UAAYZ,EAASY,QAC9B,4BAAQN,UAAU,0BACd,kBAAC,IAAD,CAASC,GAAI,oBAAqBC,MAAO,CAACC,MAAO,QAASC,eAAgB,OAAQC,OAAQ,QAA1F,8BAIPX,EAASY,OAAS,GACf,4BAAQN,UAAU,0BACd,kBAAC,IAAD,CAASC,GAAI,IAAKC,MAAO,CAACC,MAAO,QAASC,eAAgB,OAAQC,OAAQ,QAA1E,gC,aCxBb,IAAME,EAAwB,WAAO,IAAD,EACLC,mBAAS,IADJ,mBAChCC,EADgC,KACrBC,EADqB,OAELF,mBAAS,IAFJ,mBAEhCG,EAFgC,KAErBC,EAFqB,OAGiBJ,mBAAS,IAH1B,mBAGhCK,EAHgC,KAGVC,EAHU,OAIqBN,mBAAS,IAJ9B,mBAIhCO,EAJgC,KAIRC,EAJQ,KAKjCC,EAAeC,uBAAY,SAACC,GAC9BA,EAAEC,iBACF,IAAMC,EAAKC,KAAKC,MAAMC,WACtB1B,QAAQC,IAAI,SAAUU,EAAWE,EAAWE,EAAsBE,EAAwBM,GAC1F,ICXoBI,EDWdC,EAAW,CACbL,KACAV,YACAgB,KAAMlB,EACNI,uBACAE,yBACAa,cAAe,IAEnBC,EAAMC,UCnBcL,EDmBOC,EClB/B5B,QAAQC,IAAI,kBAAmB0B,GACxB,CACHM,KAAMxC,EAAiByC,aACvBC,KAAMR,KDgBNf,EAAa,IACbE,EAAa,IACbE,EAAwB,IACxBE,EAA0B,MAC3B,CAACP,EAAWE,EAAWE,EAAsBE,IAE1CmB,EAAmBhB,uBAAY,SAACC,GAClCA,EAAEC,iBACFV,EAAaS,EAAEgB,OAAOC,SACvB,IAEGC,EAAmBnB,uBAAY,SAACC,GAClCP,EAAaO,EAAEgB,OAAOC,SACvB,IAEGE,EAA+BpB,uBAAY,SAACC,GAC9CA,EAAEC,iBACFN,EACCK,EAAEgB,OAAOC,SACX,IAEGG,EAA4BrB,uBAAY,SAACC,GAC3CH,EAA0BG,EAAEgB,OAAOC,SACpC,IAEH,OACI,kBAAC,IAAMI,SAAP,KACI,0DACA,yBAAKxC,UAAU,qBACX,0BAAMyC,SAAUxB,GACZ,yBAAKjB,UAAU,2BACX,uCAEA,2BAAO+B,KAAK,OAAOK,MAAO3B,EAAWiC,SAAUR,MAGnD,6BACA,yBAAKlC,UAAU,2BACX,uCAEA,2BAAO+B,KAAK,OAAOK,MAAOzB,EAAW+B,SAAUL,MAGnD,6BACA,yBAAKrC,UAAU,2BACX,oDAEI,2BAAO+B,KAAK,OAAOK,MAAOvB,EAAsB6B,SAAUJ,MAGlE,6BACA,yBAAKtC,UAAU,2BAAf,4BAEI,+BACA,2BAAO+B,KAAK,OAAOK,MAAOrB,EAAwB2B,SAAUH,MAGhE,yBAAKvC,UAAU,4BACX,2BAAO+B,KAAK,SAASK,MAAM,cAIvC,4BAAQpC,UAAU,qBACd,kBAAC,IAAD,CAASC,GAAI,IAAKC,MAAO,CAACC,MAAO,QAASC,eAAgB,OAAQC,OAAQ,QAA1E,mB,QE7EVsC,G,MAAe,CACjBC,OAAQ,SAACC,EAAehD,GAAhB,sBACHgD,EADG,CAENC,aAAc,kBACd3C,MAAON,EAAMkD,WAAa,MAAQ,OAClCC,QAAS,GACTC,MAAO,OAETC,KAAM,SAACC,GAAD,MAAkB,CACtBF,MAAO,IACPG,gBAAiB,UAEnBC,QAAS,SAACF,GAAD,sBACJA,EADI,CAGPC,gBAAiB,QACjBH,MAAO,OAETK,YAAa,SAACT,EAAehD,GAC3B,IAAM0D,EAAU1D,EAAM2D,WAAa,GAAM,EAGzC,OAAO,eAAKX,EAAZ,CAAsBU,UAASE,WAFZ,qBAyHV7D,eAVS,SAACC,GAAD,MAAsB,CAC1CJ,UAAWI,EAAMJ,UACjBC,SAAUG,EAAMH,YAQLE,EAzGyC,SAAC,GAA6B,IAA3BH,EAA0B,EAA1BA,UAAWC,EAAe,EAAfA,SAAe,EACxCc,mBAAqB,CAAC4B,MAAO,GAAIsB,MAAO,KADA,mBAC1EC,EAD0E,KAC1DC,EAD0D,OAEhCpD,mBAAS,IAFuB,mBAE1EqD,EAF0E,KAEzDC,EAFyD,OAGpCtD,mBAA4B,CAACmB,KAAM,GAAIhC,KAAM,KAHT,mBAG1EoE,EAH0E,KAG3DC,EAH2D,OAI1CxD,mBAAqB,CAAC4B,MAAO,GAAIsB,MAAO,KAJE,mBAI1EO,EAJ0E,KAI3DC,EAJ2D,OAKtC1D,mBAAS,IAL6B,mBAK1E2D,EAL0E,KAK5DC,EAL4D,KAO3EC,EAAkBC,mBAAQ,WAC5B,OAAO7E,EAAU8E,KAAI,SAAC7C,GAAD,MAA2D,CAACU,MAAOV,EAASL,GAAIqC,MAAM,GAAD,OAAKhC,EAASC,KAAd,cAAwBD,EAASf,iBAC5I,IAEG6D,EAAuBtD,uBAAY,SAACuD,GACtC3E,QAAQC,IAAI,MAAO0E,EAAWhF,GAC9BmE,EAAea,KACf,CAAChF,IAECiF,EAAuBxD,uBAAY,WACrCpB,QAAQC,IAAI,MAAO4D,EAAevB,OAClC0B,EAAsBH,EAAevB,OACrC,IAAM2B,EAAgBtE,EAAUkF,QAAO,SAACjD,GAAD,OAA+BiC,EAAevB,QAAUV,EAASL,MAAIkD,KAAI,SAAC7C,GAAD,MAAqD,CAACC,KAAMD,EAASC,KAAMhC,KAAM+B,EAASf,cAC1Mb,QAAQC,IAAI,QAASgE,EAAc,IACnCC,EAAoBD,EAAc,MACnC,CAACJ,IAEEiB,EAAiBN,mBAAQ,WAC3B,OAAO5E,EAAS6E,KAAI,SAACM,GAAD,MAAkC,CAACzC,MAAOyC,EAAQC,MAAOpB,MAAOmB,EAAQC,YAC7F,IAEGC,EAAsB7D,uBAAY,SAACuD,GACrCP,EAAcO,KACd,CAAChF,IAECuF,EAAsB9D,uBAAY,WACpCpB,QAAQC,IAAI,iBAAkBkE,GAC9BG,EAAmBH,EAAc7B,SAClC,CAAC6B,IAEEgB,EAAmB/D,uBAAY,WDhElC,IAA8BgE,EAAoBC,ECiEjDrF,QAAQC,IAAI,aAAc8D,EAAiBM,GAC3CtC,EAAMC,UDlEuBoD,ECkEOrB,EDlEasB,ECkEIhB,EDjElD,CACHpC,KAAMxC,EAAiB6F,wBACvBnD,KAAM,CAAEiD,aAAYC,mBCgEpBrB,EAAsB,IACtBM,EAAmB,MACpB,CAACP,EAAiBM,IAErB,OACI,6BACI,yBAAKnE,UAAU,mBACX,wDAGA,yBAAKA,UAAU,0BACX,kBAAC,IAAD,CACIoC,MAAOuB,EACP0B,QAAShB,EACTlB,OAAQR,EACRD,SAAU8B,EACVc,UAAWZ,KAGnB,6BACKb,GAAe,yBACME,EAAcpC,KADpB,eAC+BoC,EAAcpE,OAEjE,yBAAKK,UAAU,uBAAf,2BAGA,yBAAKA,UAAU,yBACX,kBAAC,IAAD,CACIoC,MAAO6B,EACPoB,QAAST,EACTzB,OAAQR,EACRD,SAAUqC,EACVO,UAAWN,KAGnB,6BACKb,GAAY,wBACQA,KAG5BN,GAAmBM,GACpB,6BACI,4BAAQnE,UAAU,iCAAiCuF,QAASN,EAAkB7C,MAAM,OAApF,QAIJ,4BAAQpC,UAAU,wBACd,kBAAC,IAAD,CAASC,GAAI,IAAKC,MAAO,CAACC,MAAO,QAASC,eAAgB,OAAQC,OAAQ,QAA1E,qBChIHmF,EAAuB,WAAO,IAAD,EACAhF,mBAAS,IADT,mBAC3BC,EAD2B,KAChBC,EADgB,OAEEF,mBAAS,IAFX,mBAE3BiF,EAF2B,KAEfC,EAFe,OAGIlF,mBAAS,IAHb,mBAG3BmF,EAH2B,KAGdC,EAHc,KAI5B3E,EAAeC,uBAAY,SAACC,GAC9BA,EAAEC,iBACF,IFCeyE,EEDThB,EAAU,CACZlD,KAAMlB,EACNqE,MAAOW,EACPK,MAAOH,EACPI,mBAAoB,GACpBnE,cAAe,IAEnBC,EAAMC,UFNS+D,EEMWhB,EFL3B,CACH9C,KAAMxC,EAAiByG,YACvB/D,KAAM4D,KEIFnF,EAAa,IACbgF,EAAc,IACdE,EAAe,MAChB,CAACnF,EAAWgF,EAAYE,IAErBzD,EAAmBhB,uBAAY,SAACC,GAClCA,EAAEC,iBACFV,EAAaS,EAAEgB,OAAOC,SACvB,IAEG6D,EAAoB/E,uBAAY,SAACC,GACnCuE,EAAcvE,EAAEgB,OAAOC,SACxB,IAEG8D,EAA0BhF,uBAAY,SAACC,GACzCA,EAAEC,iBACFwE,EAAezE,EAAEgB,OAAOC,SACzB,IAEH,OACA,kBAAC,IAAMI,SAAP,KACI,gDACA,yBAAKxC,UAAU,qBACX,0BAAMyC,SAAUxB,GACZ,yBAAKjB,UAAU,2BACX,uCAEA,2BAAO+B,KAAK,OAAOK,MAAO3B,EAAWiC,SAAUR,MAGnD,6BACA,yBAAKlC,UAAU,2BACX,wCAEA,2BAAO+B,KAAK,OAAOK,MAAOqD,EAAY/C,SAAUuD,MAGpD,6BACA,yBAAKjG,UAAU,2BACX,8CAEI,2BAAO+B,KAAK,OAAOK,MAAOuD,EAAajD,SAAUwD,MAGzD,yBAAKlG,UAAU,4BACX,2BAAO+B,KAAK,SAASK,MAAM,cAIvC,4BAAQpC,UAAU,qBACd,kBAAC,IAAD,CAASC,GAAI,IAAKC,MAAO,CAACC,MAAO,QAASC,eAAgB,OAAQC,OAAQ,QAA1E,mBCvDHwB,EAAQsE,aNuBd,WAGM,IAFTtG,EAEQ,uDAFUL,EAClB4G,EACQ,uCACR,OAAOA,EAAOrE,MACV,KAAKxC,EAAiByC,aAClB,IAAMqE,EAAY,sBAAOxG,EAAMJ,WAAb,CAAwB2G,EAAOnE,OACjD,OAAO,eAAIpC,EAAX,CAAkBJ,UAAW4G,IACjC,KAAK9G,EAAiByG,YAClB,OAAO,eAAInG,EAAX,CAAkBH,SAAS,GAAD,mBAAMG,EAAMH,UAAZ,CAAsB0G,EAAOnE,SAC3D,KAAK1C,EAAiB6F,wBAClB,IAAMkB,EAAiBzG,EAAMJ,UAAU8G,WAAU,SAAA7E,GAAQ,OAAIA,EAASL,KAAO+E,EAAOnE,KAAKiD,cACnFsB,EAAkB3G,EAAMJ,UAAU6G,GACxCE,EAAgB5E,cAAc6E,KAAKL,EAAOnE,KAAKkD,cAC/C,IAAMuB,EAAiB,YAAO7G,EAAMJ,WACpC,OAAO,eAAII,EAAX,CAAkBJ,UAAWiH,IACjC,QACI,OAAO7G,KMxC2BL,GAiB/BmH,MAff,WACE,OACE,kBAAC,IAAD,CAAU9E,MAAOA,GACf,yBAAK7B,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO4G,OAAK,EAACC,KAAM,IAAKC,UAAWC,IACnC,kBAAC,IAAD,CAAOF,KAAM,eAAgBC,UAAWvG,IACxC,kBAAC,IAAD,CAAOsG,KAAM,cAAeC,UAAWtB,IACvC,kBAAC,IAAD,CAAOqB,KAAM,oBAAqBC,UAAWE,QCZnCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpI,QAAQoI,MAAMA,EAAMC,c","file":"static/js/main.13de0720.chunk.js","sourcesContent":["export enum ReduxActionTypes {\n    ADD_RESIDENT = 'ADD_RESIDENT',\n    UPDATE_RESIDENT = 'UPDATE_RESIDENT',\n    DELETE_RESIDENT = 'DELETE_RESIDENT',\n    ADD_CONTACT ='ADD_CONTACT',\n    UPDATE_CONTACT = 'UPDATE_CONTACT',\n    DELETE_CONTACT = 'DELETE_CONTACT',\n    ADD_CONTACT_TO_RESIDENT = 'ADD_CONTACT_TO_RESIDENT',\n    ADD_CONTACT_TO_CONTACT = 'ADD_CONTACT_TO_CONTACT',\n}","import { ReduxActionTypes } from './action-types';\nimport { ResidentType, ContactType } from '../models/data-models';\n\nexport interface AppState {\n    residents: Array<ResidentType>;\n    contacts: Array<ContactType>;\n    home: string;\n}\n\ninterface ReduxBaseAction {\n    type: ReduxActionTypes;\n}\n\ninterface ReduxAddResident extends ReduxBaseAction {\n    type: ReduxActionTypes.ADD_RESIDENT; \n    data: ResidentType;\n}\n\ninterface ReduxAddContact extends ReduxBaseAction {\n    type: ReduxActionTypes.ADD_CONTACT;\n    data: ContactType;\n}\n\ninterface ReduxAddContactToResident extends ReduxBaseAction {\n    type: ReduxActionTypes.ADD_CONTACT_TO_RESIDENT;\n    data: { residentId: string, contactEmail: string };\n}\n\nexport type ReduxAddContactAction = ReduxAddContactToResident;\nexport type ReduxActions = ReduxAddResident | ReduxAddContact | ReduxAddContactToResident;\n\nexport const InitialState: AppState = {\n    residents: [],\n    contacts: [],\n    home: ''\n}\n\nexport function rootReducer(\n    state: AppState = InitialState,\n    action: ReduxActions,\n): AppState {\n    switch(action.type) {\n        case ReduxActionTypes.ADD_RESIDENT:\n            const newResidents = [...state.residents, action.data];\n            return {...state, residents: newResidents}\n        case ReduxActionTypes.ADD_CONTACT:\n            return {...state, contacts: [...state.contacts, action.data]}\n        case ReduxActionTypes.ADD_CONTACT_TO_RESIDENT:\n            const activeResident = state.residents.findIndex(resident => resident.id === action.data.residentId);\n            const updatedResident = state.residents[activeResident]\n            updatedResident.firstContacts.push(action.data.contactEmail);\n            const newResidentsArray = [...state.residents];\n            return {...state, residents: newResidentsArray}\n        default:\n            return state;\n    }\n}","import React, { useCallback } from 'react';\nimport './front-page.scss';\nimport { NavLink } from 'react-router-dom';\nimport { AppState } from '../../redux/reducer';\nimport { connect } from 'react-redux';\n\nexport const FrontPage: React.FC<ContactProps> = ({ residents, contacts }) => {\n    console.log('residents, contacts', residents, contacts);\n    return (\n        <div>\n            <h2> Welcome to ProShield </h2>\n            <div className='frontpage-buttons'>\n            <button className='frontpage-buttons__create'>\n                <NavLink to={'/NewResident'} style={{color: 'black', textDecoration: 'none', border: '0px'}}>\n                    <div>Create New Resident</div>\n                </NavLink>\n            </button>\n            <button className='frontpage-buttons__create'>\n                <NavLink to={'/NewContact'} style={{color: 'black', textDecoration: 'none', border: '0px'}}>\n                    <div>Create New Contact</div>\n                </NavLink>\n            </button>\n            {!!residents.length && !!contacts.length &&\n                <button className='frontpage-buttons__add'>\n                    <NavLink to={'/ExistingResident'} style={{color: 'black', textDecoration: 'none', border: '0px'}}>\n                    Add for existing Resident\n                    </NavLink>\n                </button>}\n            {contacts.length > 1 &&\n                <button className='frontpage-buttons__add'>\n                    <NavLink to={'/'} style={{color: 'black', textDecoration: 'none', border: '0px'}}>\n                    Add Contact to Contact\n                    </NavLink>\n                </button>}\n            </div>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state: AppState) => {\n    console.log('state', state);\n    return {\n        residents: state.residents,\n        contacts: state.contacts\n    }\n}\n\ntype ContactProps = ReturnType<typeof mapStateToProps>\n\nexport default connect(mapStateToProps)(FrontPage)","import React, { useCallback, useState } from 'react';\nimport './new-resident-page.scss';\nimport { addResident } from '../../redux/actions';\nimport { NavLink } from 'react-router-dom';\nimport { store } from '../../App';\n\nexport const NewResident: React.FC = () => {\n    const [nameValue, setNameValue] = useState('');\n    const [residence, setResidence] = useState('');\n    const [emergencyContactName, setEmergencyContactName] = useState('');\n    const [emergencyContactNumber, setEmergencyContactNumber] = useState('');\n    const handleSubmit = useCallback((e) => {\n        e.preventDefault();\n        const id = Date.now().toString();\n        console.log('submit', nameValue, residence, emergencyContactName, emergencyContactNumber, id)\n        const resident = {\n            id,\n            residence,\n            name: nameValue,\n            emergencyContactName,\n            emergencyContactNumber,\n            firstContacts: []\n        }\n        store.dispatch(addResident(resident));\n        setNameValue('');\n        setResidence('');\n        setEmergencyContactName('');\n        setEmergencyContactNumber('')\n    }, [nameValue, residence, emergencyContactName, emergencyContactNumber]);\n\n    const handleNameChange = useCallback((e) => {\n        e.preventDefault();\n        setNameValue(e.target.value);\n    }, []);\n\n    const handleHomeChange = useCallback((e) => {\n        setResidence(e.target.value);\n    }, []);\n\n    const handleEmergencyContactChange = useCallback((e) => {\n        e.preventDefault();\n        setEmergencyContactName\n        (e.target.value);\n    }, []);\n\n    const handleContactNumberChange = useCallback((e) => {\n        setEmergencyContactNumber(e.target.value);\n    }, []);\n\n    return (\n        <React.Fragment>\n            <h2> Add nursing home resident</h2>\n            <div className='new-resident-form'>\n                <form onSubmit={handleSubmit}>\n                    <div className='new-resident-form-input'>\n                        <label>\n                        Name:\n                        <input type=\"text\" value={nameValue} onChange={handleNameChange} />\n                        </label>\n                    </div>\n                    <br/>\n                    <div className='new-resident-form-input'>\n                        <label>\n                        Home:\n                        <input type=\"text\" value={residence} onChange={handleHomeChange} />\n                        </label>\n                    </div>\n                    <br/>\n                    <div className='new-resident-form-input'>\n                        <label>\n                            Emergency Contact:\n                            <input type=\"text\" value={emergencyContactName} onChange={handleEmergencyContactChange} />\n                        </label>\n                    </div>\n                    <br/>\n                    <div className='new-resident-form-input'>\n                        Emergency Contact Number:\n                        <label>\n                        <input type=\"text\" value={emergencyContactNumber} onChange={handleContactNumberChange} />\n                        </label>\n                    </div>\n                    <div className='new-resident-form-submit'>\n                        <input type=\"submit\" value='Submit' />\n                    </div>\n                </form>\n            </div>     \n            <button className='new-resident-home'>\n                <NavLink to={'/'} style={{color: 'black', textDecoration: 'none', border: '0px'}}>\n                    Back to Home\n                </NavLink>\n            </button>\n        </React.Fragment>\n\n    )\n}","import { ReduxActionTypes } from './action-types';\nimport { ReduxActions } from './reducer';\nimport { ResidentType, ContactType } from '../models/data-models';\n\nexport function addResident(residentValue: ResidentType): ReduxActions {\n    console.log('resident action', residentValue);\n    return {\n        type: ReduxActionTypes.ADD_RESIDENT,\n        data: residentValue\n    }\n}\n\nexport function addContact(contactValue: ContactType): ReduxActions {\n    return {\n        type: ReduxActionTypes.ADD_CONTACT,\n        data: contactValue\n    }\n}\n\nexport function addContactToResident(residentId: string, contactEmail: string): ReduxActions {\n    return {\n        type: ReduxActionTypes.ADD_CONTACT_TO_RESIDENT,\n        data: { residentId, contactEmail }\n    }\n}","import React, { useMemo, useState, useCallback } from 'react';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport { AppState, ReduxActions } from '../../redux/reducer';\nimport { connect } from 'react-redux';\nimport Select from 'react-select';\nimport './add-contact-to-resident.scss';\nimport { addContactToResident } from '../../redux/actions';\nimport { store } from '../../App';\nimport { NavLink } from 'react-router-dom';\n\nconst customStyles = {\n    option: (provided: any, state: { isSelected: boolean; }) => ({\n      ...provided,\n      borderBottom: '1px dotted pink',\n      color: state.isSelected ? 'red' : 'blue',\n      padding: 10,\n      width: 200,\n    }),\n    menu: (styles: any) => ({\n      width: 200,\n      backgroundColor: 'ivory',\n    }),\n    control: (styles: any) => ({\n      ...styles,\n      // none of react-select's styles are passed to <Control />\n      backgroundColor: 'ivory',\n      width: 200,\n    }),\n    singleValue: (provided: any, state: { isDisabled: any; }) => {\n      const opacity = state.isDisabled ? 0.5 : 1;\n      const transition = 'opacity 300ms';\n  \n      return { ...provided, opacity, transition };\n    }\n  }\n\n  type OptionType = {\n    value: string;\n    label: string;\n  };\n\ntype foundResidentType = {\n    name: string;\n    home: string;\n}\n\nexport const ExistingResident: React.FC<ContactProps> = ({ residents, contacts }) => {\n    const [searchResident, changeResident] = useState<OptionType>({value: '', label: ''})\n    const [foundResidentId, changeFoundResidentId] = useState('');\n    const [foundResident, changeFoundResident] = useState<foundResidentType>({name: '', home: ''});\n    const [searchContact, changeContact] = useState<OptionType>({value: '', label: ''})\n    const [foundContact, changeFoundContact] = useState('');\n    \n    const ResidentOptions = useMemo(() => {\n        return residents.map((resident: { id: string; name: any; residence: any; }) => ({value: resident.id, label: `${resident.name} , ${resident.residence}`}))\n    }, []);\n\n    const handleResidentChange = useCallback((inputTerm) => {\n        console.log('inp', inputTerm, residents);\n        changeResident(inputTerm);\n      },[residents]);\n\n    const handleResidentSubmit = useCallback(() => {\n        console.log('sub', searchResident.value);\n        changeFoundResidentId(searchResident.value);\n        const foundResident = residents.filter((resident: { id: string; }) => searchResident.value === resident.id).map((resident: { name: string; residence: string; }) => ({name: resident.name, home: resident.residence}));\n        console.log('found', foundResident[0]);\n        changeFoundResident(foundResident[0])\n    }, [searchResident])\n\n    const ContactOptions = useMemo(() => {\n        return contacts.map((contact: { email: string; }) => ({value: contact.email, label: contact.email}));\n    }, []);\n\n    const handleContactChange = useCallback((inputTerm) => {\n        changeContact(inputTerm);\n      },[residents]);\n\n    const handleContactSubmit = useCallback(() => {\n        console.log('contact submit', searchContact);\n        changeFoundContact(searchContact.value);\n    }, [searchContact])\n\n    const handleAddContact = useCallback(() => {\n        console.log('handle add', foundResidentId, foundContact);\n        store.dispatch(addContactToResident(foundResidentId, foundContact));\n        changeFoundResidentId('');\n        changeFoundContact('');\n    }, [foundResidentId, foundContact])\n\n    return (\n        <div>\n            <div className='search-resident'>\n                <div>\n                    Type in resident's name\n                </div>\n                <div className='search-resident-select'>\n                    <Select \n                        value={searchResident}\n                        options={ResidentOptions}\n                        styles={customStyles}\n                        onChange={handleResidentChange}\n                        onKeyDown={handleResidentSubmit}\n                    />\n                </div>\n                <div>\n                    {foundResidentId &&\n                        `Found resident ${foundResident.name} in ${foundResident.home}`}\n                </div>\n                <div className='search-contact-text'>\n                    Type in contact's email\n                </div>\n                <div className='search-contact-select'>\n                    <Select \n                        value={searchContact}\n                        options={ContactOptions}\n                        styles={customStyles}\n                        onChange={handleContactChange}\n                        onKeyDown={handleContactSubmit}\n                    />\n                </div>\n                <div>\n                    {foundContact &&\n                        `Found contact ${foundContact}`}\n                </div>\n            </div>\n            {foundResidentId && foundContact &&\n            <div>\n                <button className='add-contact-to-resident-button' onClick={handleAddContact} value='Add'>\n                    ADD\n                </button>\n            </div>}\n            <button className='add-to-resident-home'>\n                <NavLink to={'/'} style={{color: 'black', textDecoration: 'none', border: '0px'}}>\n                    Back to Home\n                </NavLink>\n            </button>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state: AppState) => ({\n    residents: state.residents,\n    contacts: state.contacts\n})\n\n// const mapDispatchToProps = (dispatch: Dispatch<ReduxActions>) =>\n//     bindActionCreators({ addContactToResident }, dispatch);\n\ntype ContactProps = ReturnType<typeof mapStateToProps>;\n\nexport default connect(mapStateToProps)(ExistingResident)","import React, { useCallback, useState } from 'react';\nimport { addContact } from '../../redux/actions';\nimport { NavLink } from 'react-router-dom';\nimport { store } from '../../App';\n\nexport const NewContact: React.FC = () => {\n        const [nameValue, setNameValue] = useState('');\n        const [emailValue, setEmailValue] = useState('');\n        const [phoneNumber, setPhoneNumber] = useState('');\n        const handleSubmit = useCallback((e) => {\n            e.preventDefault();\n            const contact = {\n                name: nameValue,\n                email: emailValue,\n                phone: phoneNumber,\n                residentContactIDs: [],\n                firstContacts: []\n            }\n            store.dispatch(addContact(contact));\n            setNameValue('');\n            setEmailValue('');\n            setPhoneNumber('');\n        }, [nameValue, emailValue, phoneNumber]);\n    \n        const handleNameChange = useCallback((e) => {\n            e.preventDefault();\n            setNameValue(e.target.value);\n        }, []);\n    \n        const handleEmailChange = useCallback((e) => {\n            setEmailValue(e.target.value);\n        }, []);\n    \n        const handlePhoneNumberChange = useCallback((e) => {\n            e.preventDefault();\n            setPhoneNumber(e.target.value);\n        }, []);\n    \n        return (\n        <React.Fragment>\n            <h2> Add new contact</h2>\n            <div className='new-resident-form'>\n                <form onSubmit={handleSubmit}>\n                    <div className='new-resident-form-input'>\n                        <label>\n                        Name:\n                        <input type=\"text\" value={nameValue} onChange={handleNameChange} />\n                        </label>\n                    </div>\n                    <br/>\n                    <div className='new-resident-form-input'>\n                        <label>\n                        Email:\n                        <input type=\"text\" value={emailValue} onChange={handleEmailChange} />\n                        </label>\n                    </div>\n                    <br/>\n                    <div className='new-resident-form-input'>\n                        <label>\n                            Phone Number\n                            <input type=\"text\" value={phoneNumber} onChange={handlePhoneNumberChange} />\n                        </label>\n                    </div>\n                    <div className='new-resident-form-submit'>\n                        <input type=\"submit\" value='Submit' />\n                    </div>\n                </form>\n            </div>     \n            <button className='new-resident-home'>\n                <NavLink to={'/'} style={{color: 'black', textDecoration: 'none', border: '0px'}}>\n                    Back to Home\n                </NavLink>\n            </button>\n        </React.Fragment>\n    )\n}","import React from 'react';\nimport {\n  HashRouter as Router,\n  Route\n} from 'react-router-dom'\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport './App.css';\nimport { rootReducer, InitialState } from './redux/reducer';\nimport FrontPage from './components/front-page/front-page';\nimport { NewResident } from './components/new-resident-page/new-resident-page';\nimport ExistingResident from './components/add-contact-to-resident/add-contact-to-resident';\nimport { NewContact } from './components/new-contact-page/new-contact-page';\n\nexport const store = createStore(rootReducer, InitialState);\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className='App'>\n        <Router>\n          <Route exact path={'/'} component={FrontPage} />\n          <Route path={'/NewResident'} component={NewResident} />\n          <Route path={'/NewContact'} component={NewContact} />\n          <Route path={'/ExistingResident'} component={ExistingResident} />\n        </Router>\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}