{"version":3,"sources":["assets/proshield.png","redux/action-types.ts","redux/reducer.ts","components/front-page/front-page.tsx","redux/actions.ts","components/new-resident-page/new-resident-page.tsx","components/add-contact-to-resident/add-contact-to-resident.tsx","components/new-contact-page/new-contact-page.tsx","components/add-contact-to-contact/add-contact-to-contact.tsx","components/new-contact-page/sign-up.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","ReduxActionTypes","InitialState","residents","users","listOfUsers","activeUser","connect","state","console","log","contacts","className","to","style","color","textDecoration","border","length","Object","keys","href","addContact","listOfContacts","type","ADD_CONTACT","data","makeActiveUser","username","MAKE_ACTIVE_USER","createUser","user","CREATE_USER","NewResident","useState","nameValue","setNameValue","residence","setResidence","emergencyContactName","setEmergencyContactName","emergencyContactNumber","setEmergencyContactNumber","handleSubmit","useCallback","e","preventDefault","id","Date","now","toString","residentValue","resident","name","firstContacts","store","dispatch","ADD_RESIDENT","handleNameChange","target","value","handleHomeChange","handleEmergencyContactChange","handleContactNumberChange","Fragment","onSubmit","onChange","customStyles","option","provided","borderBottom","isSelected","padding","width","menu","styles","backgroundColor","control","singleValue","opacity","isDisabled","transition","label","searchResident","changeResident","foundResidentId","changeFoundResidentId","home","foundResident","changeFoundResident","searchContact","changeContact","foundContact","changeFoundContact","ResidentOptions","useMemo","map","handleResidentChange","inputTerm","handleResidentSubmit","filter","ContactOptions","handleContactChange","handleContactSubmit","handleAddContact","residentId","contactEmail","ADD_CONTACT_TO_RESIDENT","options","onKeyDown","onClick","initialState","email","phone","bindActionCreators","contactIndex","setContactIndex","setListOfContacts","activeInput","setActiveInput","contactInputType","setContactInputType","handleFirstContactChange","newArray","forEach","contact","index","addState","parseInt","oldArray","handleOnFocus","document","activeElement","tagName","split","contactInputs","onFocus","JSON","stringify","setUsername","password","setPassword","emailValue","setEmailValue","phoneNumber","setPhoneNumber","passwordValid","setPasswordValid","usernameValid","setUsernameValid","userSubmitted","setUserSubmitted","handleUsernameChange","includes","handlePasswordChange","handleEmailChange","handlePhoneNumberChange","residentContactIDs","alert","createStore","action","newResidents","updatedUser","newUser","newUsersList","newUsers","activeResident","findIndex","updatedResident","push","newResidentsArray","App","src","logo","alt","exact","path","component","FrontPage","NewContact","ExistingResident","AddContactToContact","SignUp","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7c78eab6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/proshield.5cfe51d5.png\";","export enum ReduxActionTypes {\n    ADD_RESIDENT = 'ADD_RESIDENT',\n    UPDATE_RESIDENT = 'UPDATE_RESIDENT',\n    DELETE_RESIDENT = 'DELETE_RESIDENT',\n    ADD_CONTACT ='ADD_CONTACT',\n    UPDATE_CONTACT = 'UPDATE_CONTACT',\n    DELETE_CONTACT = 'DELETE_CONTACT',\n    ADD_CONTACT_TO_RESIDENT = 'ADD_CONTACT_TO_RESIDENT',\n    ADD_CONTACT_TO_CONTACT = 'ADD_CONTACT_TO_CONTACT',\n    CREATE_USER = 'CREATE_USER',\n    MAKE_ACTIVE_USER = 'MAKE_ACTIVE_USER'\n}","import { ReduxActionTypes } from './action-types';\nimport { ResidentType, UserType, FirstContactType } from '../models/data-models';\nimport { string } from 'prop-types';\n\nexport interface AppState {\n    residents: Array<ResidentType>;\n    listOfUsers: Array<string>;\n    users: Record<string, UserType>;\n    activeUser: string;\n}\n\ninterface ReduxBaseAction {\n    type: ReduxActionTypes;\n}\n\ninterface ReduxAddResident extends ReduxBaseAction {\n    type: ReduxActionTypes.ADD_RESIDENT; \n    data: ResidentType;\n}\n\ninterface ReduxAddContact extends ReduxBaseAction {\n    type: ReduxActionTypes.ADD_CONTACT;\n    data: { activeUser: string, listOfContacts: Array<FirstContactType>};\n}\n\ninterface ReduxAddContactToResident extends ReduxBaseAction {\n    type: ReduxActionTypes.ADD_CONTACT_TO_RESIDENT;\n    data: { residentId: string, contactEmail: string };\n}\n\ninterface ReduxMakeActiveUser extends ReduxBaseAction {\n    type: ReduxActionTypes.MAKE_ACTIVE_USER;\n    data: string;\n}\n\ninterface ReduxCreateUser extends ReduxBaseAction {\n    type: ReduxActionTypes.CREATE_USER;\n    data: { username: string, user: UserType }\n}\n\n// export type ReduxAddContactAction = ReduxAddContactToResident;\nexport type ReduxActions = \n    ReduxAddResident | \n    ReduxAddContact | \n    ReduxAddContactToResident | \n    ReduxMakeActiveUser | \n    ReduxCreateUser;\n\nexport const InitialState: AppState = {\n    residents: [],\n    users: {},\n    listOfUsers: [],\n    activeUser: ''\n}\n\nexport function rootReducer(\n    state: AppState = InitialState,\n    action: ReduxActions,\n): AppState {\n    console.log('REDUCER HIT', action);\n    switch(action.type) {\n        case ReduxActionTypes.ADD_RESIDENT:\n            const newResidents = [...state.residents, action.data];\n            return {...state, residents: newResidents}\n        case ReduxActionTypes.ADD_CONTACT:\n            const { activeUser, listOfContacts } = action.data;\n            const updatedUser = state.users[activeUser];\n            updatedUser.firstContacts = listOfContacts;\n            console.log('in reducer', updatedUser);\n            return {...state, users: {...state.users, [activeUser]: {...updatedUser}}}\n        case ReduxActionTypes.CREATE_USER:\n            const newUser = action.data.username;\n            const newUsersList = [...state.listOfUsers, newUser];\n            const newUsers = {...state.users, [newUser]: action.data.user};\n            return {...state, users: newUsers, listOfUsers: newUsersList};\n        case ReduxActionTypes.MAKE_ACTIVE_USER:\n            return {...state, activeUser: action.data};\n        case ReduxActionTypes.ADD_CONTACT_TO_RESIDENT:\n            const activeResident = state.residents.findIndex(resident => resident.id === action.data.residentId);\n            const updatedResident = state.residents[activeResident]\n            updatedResident.firstContacts.push(action.data.contactEmail);\n            const newResidentsArray = [...state.residents];\n            return {...state, residents: newResidentsArray}\n        default:\n            return state;\n    }\n}","import React, { useCallback } from 'react';\nimport './front-page.scss';\nimport { NavLink } from 'react-router-dom';\nimport { AppState } from '../../redux/reducer';\nimport { connect } from 'react-redux';\n\nexport const FrontPage: React.FC<ContactProps> = ({ residents, contacts }) => {\n    console.log('residents, contacts', residents, contacts);\n    return (\n        <div>\n            <h2> Welcome to ProShield </h2>\n            <div className='frontpage-buttons'>\n            <button className='frontpage-buttons__create'>\n                <NavLink to={'/NewResident'} style={{color: 'black', textDecoration: 'none', border: '0px'}}>\n                    <div>Create New Resident</div>\n                </NavLink>\n            </button>\n            <button className='frontpage-buttons__create'>\n                <NavLink to={'/Signup'} style={{color: 'black', textDecoration: 'none', border: '0px'}}>\n                    <div>Create New User</div>\n                </NavLink>\n            </button>\n            {!!residents.length && !!contacts.length &&\n                <button className='frontpage-buttons__add'>\n                    <NavLink to={'/ExistingResident'} style={{color: 'black', textDecoration: 'none', border: '0px'}}>\n                    Add for existing Resident\n                    </NavLink>\n                </button>}\n            {Object.keys(contacts).length > 1 &&\n                <button className='frontpage-buttons__add'>\n                    <NavLink to={'/AddContactToContact'} style={{color: 'black', textDecoration: 'none', border: '0px'}}>\n                    Add Contact to Contact\n                    </NavLink>\n                </button>}\n            </div>\n            <div className='frontpage-footer'>\n                MVP created as part of \n                <br/>\n                <a href=\"https://covid19challenge.mit.edu/beat-the-pandemic-2/\">MIT Beat the Pandemic II hackathon</a>\n                <br/>\n                Track G\n            </div>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state: AppState) => {\n    console.log('state', state);\n    return {\n        residents: state.residents,\n        contacts: state.users\n    }\n}\n\ntype ContactProps = ReturnType<typeof mapStateToProps>\n\nexport default connect(mapStateToProps)(FrontPage)","import { ReduxActionTypes } from './action-types';\nimport { ReduxActions } from './reducer';\nimport { ResidentType, UserType, FirstContactType } from '../models/data-models';\n\nexport function addResident(residentValue: ResidentType): ReduxActions {\n    console.log('resident action', residentValue);\n    return {\n        type: ReduxActionTypes.ADD_RESIDENT,\n        data: residentValue\n    }\n}\n\nexport function addContact(activeUser: string, listOfContacts: Array<FirstContactType>): ReduxActions {\n    return {\n        type: ReduxActionTypes.ADD_CONTACT,\n        data: { activeUser, listOfContacts }\n    }\n}\n\nexport function makeActiveUser(username: string): ReduxActions {\n    return {\n        type: ReduxActionTypes.MAKE_ACTIVE_USER,\n        data: username\n    }\n}\n\nexport function createUser(username: string, user: UserType): ReduxActions {\n    return {\n        type: ReduxActionTypes.CREATE_USER,\n        data: { username, user }\n    }\n}\n\nexport function addContactToResident(residentId: string, contactEmail: string): ReduxActions {\n    return {\n        type: ReduxActionTypes.ADD_CONTACT_TO_RESIDENT,\n        data: { residentId, contactEmail }\n    }\n}","import React, { useCallback, useState } from 'react';\nimport './new-resident-page.scss';\nimport { addResident } from '../../redux/actions';\nimport { NavLink } from 'react-router-dom';\nimport { store } from '../../App';\n\nexport const NewResident: React.FC = () => {\n    const [nameValue, setNameValue] = useState('');\n    const [residence, setResidence] = useState('');\n    const [emergencyContactName, setEmergencyContactName] = useState('');\n    const [emergencyContactNumber, setEmergencyContactNumber] = useState('');\n    const handleSubmit = useCallback((e) => {\n        e.preventDefault();\n        const id = Date.now().toString();\n        console.log('submit', nameValue, residence, emergencyContactName, emergencyContactNumber, id)\n        const resident = {\n            id,\n            residence,\n            name: nameValue,\n            emergencyContactName,\n            emergencyContactNumber,\n            firstContacts: []\n        }\n        store.dispatch(addResident(resident));\n        setNameValue('');\n        setResidence('');\n        setEmergencyContactName('');\n        setEmergencyContactNumber('')\n    }, [nameValue, residence, emergencyContactName, emergencyContactNumber]);\n\n    const handleNameChange = useCallback((e) => {\n        e.preventDefault();\n        setNameValue(e.target.value);\n    }, []);\n\n    const handleHomeChange = useCallback((e) => {\n        setResidence(e.target.value);\n    }, []);\n\n    const handleEmergencyContactChange = useCallback((e) => {\n        e.preventDefault();\n        setEmergencyContactName\n        (e.target.value);\n    }, []);\n\n    const handleContactNumberChange = useCallback((e) => {\n        setEmergencyContactNumber(e.target.value);\n    }, []);\n\n    return (\n        <React.Fragment>\n            <h2> Add nursing home resident</h2>\n            <div className='new-resident-form'>\n                <form onSubmit={handleSubmit}>\n                    <div className='new-resident-form-input'>\n                        <label>\n                        Name:\n                        <input type=\"text\" value={nameValue} onChange={handleNameChange} />\n                        </label>\n                    </div>\n                    <br/>\n                    <div className='new-resident-form-input'>\n                        <label>\n                        Home:\n                        <input type=\"text\" value={residence} onChange={handleHomeChange} />\n                        </label>\n                    </div>\n                    <br/>\n                    <div className='new-resident-form-input'>\n                        <label>\n                            Emergency Contact:\n                            <input type=\"text\" value={emergencyContactName} onChange={handleEmergencyContactChange} />\n                        </label>\n                    </div>\n                    <br/>\n                    <div className='new-resident-form-input'>\n                        Emergency Contact Number:\n                        <label>\n                        <input type=\"text\" value={emergencyContactNumber} onChange={handleContactNumberChange} />\n                        </label>\n                    </div>\n                    <div className='new-resident-form-submit'>\n                        <input type=\"submit\" value='Submit' />\n                    </div>\n                </form>\n            </div>     \n            <button className='new-resident-home'>\n                <NavLink to={'/'} style={{color: 'black', textDecoration: 'none', border: '0px'}}>\n                    Back to Home\n                </NavLink>\n            </button>\n        </React.Fragment>\n    )\n}","import React, { useMemo, useState, useCallback } from 'react';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport { AppState, ReduxActions } from '../../redux/reducer';\nimport { connect } from 'react-redux';\nimport Select from 'react-select';\nimport './add-contact-to-resident.scss';\nimport { addContactToResident } from '../../redux/actions';\nimport { store } from '../../App';\nimport { NavLink } from 'react-router-dom';\n\nconst customStyles = {\n    option: (provided: any, state: { isSelected: boolean; }) => ({\n      ...provided,\n      borderBottom: '1px dotted pink',\n      color: state.isSelected ? 'red' : 'blue',\n      padding: 10,\n      width: 200,\n    }),\n    menu: (styles: any) => ({\n      width: 200,\n      backgroundColor: 'ivory',\n    }),\n    control: (styles: any) => ({\n      ...styles,\n      // none of react-select's styles are passed to <Control />\n      backgroundColor: 'ivory',\n      width: 200,\n    }),\n    singleValue: (provided: any, state: { isDisabled: any; }) => {\n      const opacity = state.isDisabled ? 0.5 : 1;\n      const transition = 'opacity 300ms';\n  \n      return { ...provided, opacity, transition };\n    }\n  }\n\n  type OptionType = {\n    value: string;\n    label: string;\n  };\n\ntype foundResidentType = {\n    name: string;\n    home: string;\n}\n\nexport const ExistingResident: React.FC<ContactProps> = ({ residents, contacts }) => {\n    const [searchResident, changeResident] = useState<OptionType>({value: '', label: ''})\n    const [foundResidentId, changeFoundResidentId] = useState('');\n    const [foundResident, changeFoundResident] = useState<foundResidentType>({name: '', home: ''});\n    const [searchContact, changeContact] = useState<OptionType>({value: '', label: ''})\n    const [foundContact, changeFoundContact] = useState('');\n    \n    const ResidentOptions = useMemo(() => {\n        return residents.map((resident: { id: string; name: any; residence: any; }) => ({value: resident.id, label: `${resident.name} , ${resident.residence}`}))\n    }, []);\n\n    const handleResidentChange = useCallback((inputTerm) => {\n        console.log('inp', inputTerm, residents);\n        changeResident(inputTerm);\n      },[residents]);\n\n    const handleResidentSubmit = useCallback(() => {\n        console.log('sub', searchResident.value);\n        changeFoundResidentId(searchResident.value);\n        const foundResident = residents.filter((resident: { id: string; }) => searchResident.value === resident.id).map((resident: { name: string; residence: string; }) => ({name: resident.name, home: resident.residence}));\n        console.log('found', foundResident[0]);\n        changeFoundResident(foundResident[0])\n    }, [searchResident])\n\n    //TODO fix since contacts became an object map\n    const ContactOptions = useMemo(() => {\n        return [];\n        // return contacts.map((contact: { email: string; }) => ({value: contact.email, label: contact.email}));\n    }, []);\n\n    const handleContactChange = useCallback((inputTerm) => {\n        changeContact(inputTerm);\n      },[residents]);\n\n    const handleContactSubmit = useCallback(() => {\n        console.log('contact submit', searchContact);\n        changeFoundContact(searchContact.value);\n    }, [searchContact])\n\n    const handleAddContact = useCallback(() => {\n        console.log('handle add', foundResidentId, foundContact);\n        store.dispatch(addContactToResident(foundResidentId, foundContact));\n        changeFoundResidentId('');\n        changeFoundContact('');\n    }, [foundResidentId, foundContact])\n\n    return (\n        <div>\n            <div className='search-resident'>\n                <div>\n                    Type in resident's name\n                </div>\n                <div className='search-resident-select'>\n                    <Select \n                        value={searchResident}\n                        options={ResidentOptions}\n                        styles={customStyles}\n                        onChange={handleResidentChange}\n                        onKeyDown={handleResidentSubmit}\n                    />\n                </div>\n                <div>\n                    {foundResidentId &&\n                        `Found resident ${foundResident.name} in ${foundResident.home}`}\n                </div>\n                <div className='search-contact-text'>\n                    Type in contact's email\n                </div>\n                <div className='search-contact-select'>\n                    <Select \n                        value={searchContact}\n                        options={ContactOptions}\n                        styles={customStyles}\n                        onChange={handleContactChange}\n                        onKeyDown={handleContactSubmit}\n                    />\n                </div>\n                <div>\n                    {foundContact &&\n                        `Found contact ${foundContact}`}\n                </div>\n            </div>\n            {foundResidentId && foundContact &&\n            <div>\n                <button className='add-contact-to-resident-button' onClick={handleAddContact} value='Add'>\n                    ADD\n                </button>\n            </div>}\n            <button className='add-to-resident-home'>\n                <NavLink to={'/'} style={{color: 'black', textDecoration: 'none', border: '0px'}}>\n                    Back to Home\n                </NavLink>\n            </button>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state: AppState) => ({\n    residents: state.residents,\n    contacts: state.users\n})\n\n// const mapDispatchToProps = (dispatch: Dispatch<ReduxActions>) =>\n//     bindActionCreators({ addContactToResident }, dispatch);\n\ntype ContactProps = ReturnType<typeof mapStateToProps>;\n\nexport default connect(mapStateToProps)(ExistingResident)","import React, { useCallback, useState, useMemo } from 'react';\nimport { addContact } from '../../redux/actions';\nimport { NavLink } from 'react-router-dom';\nimport { FirstContactType, FirstContactFieldType } from '../../models/data-models';\nimport { AppState } from '../../redux/reducer';\nimport { Dispatch, AnyAction, bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\n\nconst initialState: FirstContactType = {\n    name: '',\n    email: '',\n    phone: '',\n    id: '0'\n}\n\nexport const NewContact: React.FC<ContactProps> = ({ activeUser, addContact }) => {\n        const [contactIndex, setContactIndex] = useState('0');\n        const [listOfContacts, setListOfContacts] = useState<Array<FirstContactType>>([initialState]);\n        const [activeInput, setActiveInput] = useState(0);\n        const [contactInputType, setContactInputType] = useState<FirstContactFieldType>('name');\n\n        const handleSubmit = useCallback((e) => {\n            console.log('submit', listOfContacts)\n            e.preventDefault();\n            addContact(activeUser, listOfContacts);\n        }, [listOfContacts]);\n    \n        const handleFirstContactChange = useCallback((e) => {\n            const newArray = [...listOfContacts];\n            listOfContacts.forEach((contact, index) => {\n                if (activeInput === index) {\n                    contact[contactInputType] = e.target.value;\n                }\n                return contact;\n            });\n            setListOfContacts(newArray);\n        }, [activeInput, listOfContacts, contactInputType])\n\n        const handleAddContact = useCallback(() => {\n            const addState = {\n                name: '',\n                email: '',\n                phone: '',\n                id: `${parseInt(contactIndex)+1}`\n            }\n            setListOfContacts(oldArray => [...oldArray, addState]);\n            setContactIndex(`${parseInt(contactIndex)+1}`);\n        }, [contactIndex])\n\n        const handleOnFocus = useCallback(() => {\n            if (document.activeElement && document.activeElement.tagName === 'INPUT') {\n                setContactInputType((document.activeElement as HTMLInputElement).name.split(':')[0] as FirstContactFieldType);\n                setActiveInput(parseInt((document.activeElement as HTMLInputElement).name.split(':')[1]));\n            }\n        }, []);\n\n        const contactInputs = useMemo(() => {\n            return listOfContacts.map((contact, index) => (                    \n                <div className='new-resident-form-input'>\n                    <div>Add close contact</div>\n                    <label>\n                        Name\n                        <input type=\"text\" name={`${'name' as FirstContactFieldType}:${index}`} value={`${contact.name}`} onFocus={handleOnFocus} onChange={handleFirstContactChange}/>\n                    </label>\n                    <label>\n                        Email\n                        <input type=\"text\" name={`${'email' as FirstContactFieldType}:${index}`} value={`${contact.email}`} onFocus={handleOnFocus} onChange={handleFirstContactChange}/>\n                    </label>\n                    <label>\n                        Phone\n                        <input type=\"text\" name={`${'phone' as FirstContactFieldType}:${index}`} value={`${contact.phone}`} onFocus={handleOnFocus} onChange={handleFirstContactChange}/>\n                    </label>\n                </div>\n            ))\n        }, [contactIndex, listOfContacts, handleOnFocus, handleFirstContactChange])\n\n        return (\n        <React.Fragment>\n            <h2> Add contacts </h2>\n            <div className='new-contact-form'>\n                <div>\n                    {contactInputs}\n                    <div className='new-contact-add-btn'>\n                        <input type='submit' value='Add Contact' onClick={handleAddContact}/>\n                    </div>\n                    <div className='new-contact-form-submit'>\n                        <input type=\"submit\" value='Submit' onClick={handleSubmit}/>\n                    </div>\n                </div>\n            </div>     \n            <button className='new-contact-home'>\n                <NavLink to={'/'} style={{color: 'black', textDecoration: 'none', border: '0px'}}>\n                    Back to Home\n                </NavLink>\n            </button>\n        </React.Fragment>\n    )\n}\n\n\nconst mapStateToProps = (state: AppState) => {\n    return {\n        activeUser: state.activeUser\n    }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>) =>\n    bindActionCreators({ addContact }, dispatch);\n\ntype ContactProps = ReturnType<typeof mapStateToProps> & ReturnType<typeof mapDispatchToProps>\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(NewContact)","import React, { useState } from 'react';\nimport { AppState } from '../../redux/reducer';\nimport { connect } from 'react-redux';\n\nexport const AddContactToContact: React.FC<ContactProps> = ({ contacts }) => {\n    console.log('contacts', contacts);\n    const [searchMainContact, changeMainContact] = useState({value: '', name: ''})\n    return (\n        <div> hello {JSON.stringify(contacts)} </div>\n    )\n}\n\nconst mapStateToProps = (state: AppState) => {\n    return {\n        contacts: state.users\n    }\n}\n\ntype ContactProps = ReturnType<typeof mapStateToProps>\n\nexport default connect(mapStateToProps)(AddContactToContact)","import React, { useState, useCallback } from 'react';\nimport { connect } from 'react-redux';\nimport { AppState } from '../../redux/reducer';\nimport { bindActionCreators, Dispatch, AnyAction } from 'redux';\nimport { createUser, makeActiveUser } from '../../redux/actions';\nimport { Redirect } from 'react-router';\nimport './new-contact-page.scss';\n\nexport const SignUp: React.FC<ContactProps> = ({ users, createUser, makeActiveUser }) => {\n    const [username, setUsername] = useState('');\n    const [password, setPassword] = useState('');\n    const [nameValue, setNameValue] = useState('');\n    const [emailValue, setEmailValue] = useState('');\n    const [phoneNumber, setPhoneNumber] = useState('');\n    const [passwordValid, setPasswordValid] = useState(false);\n    const [usernameValid, setUsernameValid] = useState(false);\n    const [userSubmitted, setUserSubmitted] = useState(false);\n\n    const handleUsernameChange = useCallback(e => {\n        console.log('users in name change', users);\n        setUsername(e.target.value);\n        if (!users.includes(e.target.value)) {\n            setUsernameValid(true);\n        };\n    }, [users]);\n\n    const handlePasswordChange = useCallback(e => {\n        setPassword(e.target.value);\n        if((e.target.value.length) > 7) {\n            setPasswordValid(true)\n        }\n    }, [])\n    \n    const handleNameChange = useCallback((e) => {\n        e.preventDefault();\n        setNameValue(e.target.value);\n    }, []);\n\n    const handleEmailChange = useCallback((e) => {\n        setEmailValue(e.target.value);\n    }, []);\n\n    const handlePhoneNumberChange = useCallback((e) => {\n        e.preventDefault();\n        setPhoneNumber(e.target.value);\n    }, []);\n\n    const handleSubmit = useCallback(() => {\n        const user = {\n            residentContactIDs: [],\n            username: username,\n            name: nameValue,\n            phone: phoneNumber,\n            email: emailValue,\n            password,\n            firstContacts: []\n        }\n        if (usernameValid && passwordValid) {\n            createUser(username, user);\n            makeActiveUser(username);\n            setNameValue('');\n            setEmailValue('');\n            setPhoneNumber('');\n            setUserSubmitted(true);\n        } else {\n            alert('user name and password must be valid');\n        }\n    }, [password, username, nameValue, emailValue, phoneNumber])\n\n    if (userSubmitted) \n        return <Redirect to={'/NewContact'} />\n\n    return (\n        <div className='signup-container'>\n            <div className='signup-input'>\n                <label>\n                    Username\n                </label>\n                <input type='text' value={username} onChange={handleUsernameChange} />\n            </div>\n            <div className='signup-input'>\n                <label>\n                    password (at least 8 characters)\n                </label>\n                <input type='text' value={password} onChange={handlePasswordChange} />\n            </div>\n            <div className='signup-input'>\n                <label>\n                    Name:\n                </label>\n                <input type=\"text\" value={nameValue} onChange={handleNameChange} />\n            </div>\n            <div className='signup-input'>\n                <label>\n                Email:\n                </label>\n                <input type=\"text\" value={emailValue} onChange={handleEmailChange} />\n            </div>\n            <div className='signup-input'>\n                <label>\n                    Phone Number\n                </label>\n                <input type=\"text\" value={phoneNumber} onChange={handlePhoneNumberChange} />\n            </div>\n            <div className='signup-submit'>\n                <input type=\"submit\" value='Submit' onClick={handleSubmit}/>\n            </div>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state: AppState) => {\n    return {\n        users: state.listOfUsers\n    }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>) =>\n    bindActionCreators({ createUser, makeActiveUser }, dispatch);\n\ntype ContactProps = ReturnType<typeof mapStateToProps> & ReturnType<typeof mapDispatchToProps>\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(SignUp)","import React from 'react';\nimport {\n  HashRouter as Router,\n  Route\n} from 'react-router-dom'\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport { rootReducer, InitialState } from './redux/reducer';\nimport logo from './assets/proshield.png';\nimport FrontPage from './components/front-page/front-page';\nimport { NewResident } from './components/new-resident-page/new-resident-page';\nimport ExistingResident from './components/add-contact-to-resident/add-contact-to-resident';\nimport NewContact from './components/new-contact-page/new-contact-page';\nimport AddContactToContact from './components/add-contact-to-contact/add-contact-to-contact';\nimport SignUp from './components/new-contact-page/sign-up';\nimport './App.css';\n\nexport const store = createStore(rootReducer, InitialState);\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className='App'>\n        <div className='App-header'>\n          <div className='App-header-text'>\n            Welcome to ProShield\n          </div>\n          <div className='App-header-logo'>\n            <img width='20px' src={logo} alt='logo'/>\n          </div>\n        </div>\n        <Router>\n          <Route exact path={'/'} component={FrontPage} />\n          <Route path={'/NewResident'} component={NewResident} />\n          <Route path={'/NewContact'} component={NewContact} />\n          <Route path={'/ExistingResident'} component={ExistingResident} />\n          <Route path={'/AddContactToContact'} component={AddContactToContact} />\n          <Route path={'/Signup'} component={SignUp} />\n        </Router>\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}